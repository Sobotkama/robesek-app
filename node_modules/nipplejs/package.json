{
  "_args": [
    [
      {
        "raw": "nipplejs@^0.6.7",
        "scope": null,
        "escapedName": "nipplejs",
        "name": "nipplejs",
        "rawSpec": "^0.6.7",
        "spec": ">=0.6.7 <0.7.0",
        "type": "range"
      },
      "/home/sobotkama/pi/html/robesek/www"
    ]
  ],
  "_from": "nipplejs@>=0.6.7 <0.7.0",
  "_id": "nipplejs@0.6.7",
  "_inCache": true,
  "_location": "/nipplejs",
  "_nodeVersion": "6.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/nipplejs-0.6.7.tgz_1477609174753_0.20039054402150214"
  },
  "_npmUser": {
    "name": "yoannmoinet",
    "email": "yo@nnmoi.net"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nipplejs@^0.6.7",
    "scope": null,
    "escapedName": "nipplejs",
    "name": "nipplejs",
    "rawSpec": "^0.6.7",
    "spec": ">=0.6.7 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/nipplejs/-/nipplejs-0.6.7.tgz",
  "_shasum": "c634b63d0583868d033b5f34813e9388066cc9b6",
  "_shrinkwrap": null,
  "_spec": "nipplejs@^0.6.7",
  "_where": "/home/sobotkama/pi/html/robesek/www",
  "author": {
    "name": "Yoann Moinet",
    "email": "yoann.moinet@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/yoannmoinet/nipplejs/issues"
  },
  "dependencies": {},
  "description": "A virtual joystick for touch capable interfaces",
  "devDependencies": {
    "casperjs": "^1.1.3",
    "concat-cli": "^4.0.0",
    "conventional-changelog": "^1.1.0",
    "eslint": "^3.1.0",
    "expect.js": "^0.3.1",
    "jscs": "^3.0.7",
    "markdown-toc": "^0.12.16",
    "mocha": "^3.0.2",
    "node-static": "^0.7.8",
    "phantomjs-prebuilt": "^2.1.12",
    "uglify-js": "^2.7.3",
    "umd": "^3.0.1",
    "watch": "^0.19.2"
  },
  "directories": {},
  "dist": {
    "shasum": "c634b63d0583868d033b5f34813e9388066cc9b6",
    "tarball": "https://registry.npmjs.org/nipplejs/-/nipplejs-0.6.7.tgz"
  },
  "gitHead": "0c982ce1fe25ae6d96a0765d48f0f348a030f960",
  "homepage": "https://github.com/yoannmoinet/nipplejs",
  "license": "MIT",
  "main": "./dist/nipplejs.js",
  "maintainers": [
    {
      "name": "yoannmoinet",
      "email": "yo@nnmoi.net"
    }
  ],
  "name": "nipplejs",
  "optionalDependencies": {},
  "readme": "![alt tag](./test/nipplejs.png)\r\n> A vanilla virtual joystick for touch capable interfaces\r\n\r\n[![NPM](https://nodei.co/npm-dl/nipplejs.png?months=3)](https://npmjs.org/package/nipplejs)\r\n\r\n# Table Of Contents\r\n<details>\r\n\r\n<!-- toc -->\r\n\r\n- [Install](#install)\r\n- [Demo](#demo)\r\n- [Usage](#usage)\r\n- [Options](#options)\r\n  * [`options.zone` defaults to 'body'](#optionszone-defaults-to-body)\r\n  * [`options.color` defaults to 'white'](#optionscolor-defaults-to-white)\r\n  * [`options.size` defaults to 100](#optionssize-defaults-to-100)\r\n  * [`options.threshold` defaults to 0.1](#optionsthreshold-defaults-to-01)\r\n  * [`options.fadeTime` defaults to 250](#optionsfadetime-defaults-to-250)\r\n  * [`options.multitouch` defaults to false](#optionsmultitouch-defaults-to-false)\r\n  * [`options.maxNumberOfNipples` defaults to 1](#optionsmaxnumberofnipples-defaults-to-1)\r\n  * [`options.dataOnly` defaults to false](#optionsdataonly-defaults-to-false)\r\n  * [`options.position` defaults to `{top: 0, left: 0}`](#optionsposition-defaults-to-top-0-left-0)\r\n  * [`options.mode` defaults to 'dynamic'.](#optionsmode-defaults-to-dynamic)\r\n    + [`'dynamic'`](#dynamic)\r\n    + [`'semi'`](#semi)\r\n    + [`'static'`](#static)\r\n  * [`options.restOpacity` defaults to 0.5](#optionsrestopacity-defaults-to-05)\r\n  * [`options.catchDistance` defaults to 200](#optionscatchdistance-defaults-to-200)\r\n- [API](#api)\r\n  * [NippleJS instance (manager)](#nipplejs-instance-manager)\r\n    + [`manager.on(type, handler)`](#managerontype-handler)\r\n    + [`manager.off([type, handler])`](#managerofftype-handler)\r\n    + [`manager.get(identifier)`](#managergetidentifier)\r\n    + [`manager.destroy()`](#managerdestroy)\r\n    + [`manager.ids`](#managerids)\r\n    + [`manager.id`](#managerid)\r\n  * [nipple instance (joystick)](#nipple-instance-joystick)\r\n  * [`joystick.on`, `joystick.off`](#joystickon-joystickoff)\r\n  * [`joystick.el`](#joystickel)\r\n  * [`joystick.show([cb])`](#joystickshowcb)\r\n  * [`joystick.hide([cb])`](#joystickhidecb)\r\n  * [`joystick.add()`](#joystickadd)\r\n  * [`joystick.remove()`](#joystickremove)\r\n  * [`joystick.destroy()`](#joystickdestroy)\r\n  * [`joystick.identifier`](#joystickidentifier)\r\n  * [`joystick.trigger(type [, data])`](#joysticktriggertype--data)\r\n  * [`joystick.position`](#joystickposition)\r\n  * [`joystick.frontPosition`](#joystickfrontposition)\r\n  * [`joystick.ui`](#joystickui)\r\n- [Events](#events)\r\n  * [manager only](#manager-only)\r\n    + [`added`](#added)\r\n    + [`removed`](#removed)\r\n  * [manager and joysticks](#manager-and-joysticks)\r\n    + [`start`](#start)\r\n    + [`end`](#end)\r\n    + [`move`](#move)\r\n    + [`dir`](#dir)\r\n    + [`plain`](#plain)\r\n    + [`shown`](#shown)\r\n    + [`hidden`](#hidden)\r\n    + [`destroyed`](#destroyed)\r\n    + [`pressure`](#pressure)\r\n- [Contributing](#contributing)\r\n    + [Commits](#commits)\r\n    + [Style](#style)\r\n    + [Workflow](#workflow)\r\n    + [Build](#build)\r\n\r\n<!-- tocstop -->\r\n</details>\r\n\r\n## Install\r\n\r\n```bash\r\nnpm install nipplejs --save\r\n\r\n// OR\r\n\r\nbower install nipplejs --save\r\n```\r\n\r\n----\r\n\r\n## Demo\r\nCheck out the [demo here](http://yoannmoinet.github.io/nipplejs/#demo).\r\n\r\n----\r\n\r\n## Usage\r\n\r\nImport it the way you want into your project :\r\n\r\n```javascript\r\n// CommonJS\r\nvar manager = require('nipplejs').create(options);\r\n```\r\n\r\n```javascript\r\n// AMD\r\ndefine(['nipplejs'], function (nipplejs) {\r\n    var manager = nipplejs.create(options);\r\n});\r\n```\r\n\r\n```html\r\n// Global\r\n<script src=\"./dist/nipplejs.min.js\"></script>\r\n<script>\r\n    var manager = nipplejs.create(options);\r\n</script>\r\n```\r\n\r\n**:warning: NB :warning:** Your joystick's container **has** to have its CSS `position` property set, either `absolute`, `relative`, `static`, ....\r\n\r\n----\r\n\r\n## Options\r\nYou can configure your joystick in different ways :\r\n\r\n```javascript\r\nvar options = {\r\n    zone: Element,                  // active zone\r\n    color: String,\r\n    size: Integer,\r\n    threshold: Float,               // before triggering a directional event\r\n    fadeTime: Integer,              // transition time\r\n    multitouch: Boolean,\r\n    maxNumberOfNipples: Number,     // when multitouch, what is too many?\r\n    dataOnly: Boolean,              // no dom element whatsoever\r\n    position: Object,               // preset position for 'static' mode\r\n    mode: String,                   // 'dynamic', 'static' or 'semi'\r\n    restOpacity: Number,            // opacity when not 'dynamic' and rested\r\n    catchDistance: Number           // distance to recycle previous joystick in\r\n                                    // 'semi' mode\r\n};\r\n```\r\n\r\nAll options are optional :sunglasses:.\r\n\r\n### `options.zone` defaults to 'body'\r\nThe dom element in which all your joysticks will be injected.\r\n\r\n```html\r\n<div id=\"zone_joystick\"></div>\r\n\r\n<script type=\"text/javascript\" src=\"./nipplejs.min.js\"></script>\r\n<script type=\"text/javascript\">\r\n    var options = {\r\n        zone: document.getElementById('zone_joystick');\r\n    };\r\n    var manager = nipplejs.create(options);\r\n</script>\r\n```\r\n\r\nThis zone also serve as the mouse/touch events handler.\r\n\r\nIt represents the zone where all your joysticks will be active.\r\n\r\n### `options.color` defaults to 'white'\r\nThe background color of your joystick's elements.\r\n\r\nCan be any valid CSS color.\r\n\r\n### `options.size` defaults to 100\r\nThe size in pixel of the outer circle.\r\n\r\nThe inner circle is 50% of this size.\r\n\r\n### `options.threshold` defaults to 0.1\r\nThis is the strength needed to trigger a directional event.\r\n\r\nBasically, the center is 0 and the outer is 1.\r\n\r\nYou need to at least go to 0.1 to trigger a directional event.\r\n\r\n### `options.fadeTime` defaults to 250\r\nThe time it takes for joystick to fade-out and fade-in when activated or de-activated.\r\n\r\n### `options.multitouch` defaults to false\r\nEnable the multitouch capabilities.\r\n\r\nIf, for reasons, you need to have multiple nipples into the same zone.\r\n\r\nOtherwise it will only get one, and all new touches won't do a thing.\r\n\r\nPlease note that multitouch is off when in `static` or `semi` modes.\r\n\r\n### `options.maxNumberOfNipples` defaults to 1\r\nIf you need to, you can also control the maximum number of instance that could be created.\r\n\r\nObviously in a multitouch configuration.\r\n\r\n### `options.dataOnly` defaults to false\r\nThe library won't draw anything in the DOM and will only trigger events with data.\r\n\r\n### `options.position` defaults to `{top: 0, left: 0}`\r\nAn object that will determine the position of a `static` mode.\r\n\r\nYou can pass any of the four `top`, `right`, `bottom` and `left`.\r\n\r\nThey will be applied as any css property.\r\n\r\nEx :\r\n- `{top: '50px', left: '50px'}`\r\n- `{left: '10%', bottom: '10%'}`\r\n\r\n### `options.mode` defaults to 'dynamic'.\r\nThree modes are possible :\r\n\r\n#### `'dynamic'`\r\n- a new joystick is created at each new touch.\r\n- the joystick gets destroyed when released.\r\n- **can** be multitouch.\r\n\r\n#### `'semi'`\r\n- new joystick is created at each new touch farther than `options.catchDistance` of any previously created joystick.\r\n- the joystick is faded-out when released but not destroyed.\r\n- when touch is made **inside** the `options.catchDistance` a new direction is triggered immediately.\r\n- when touch is made **oustide** the `options.catchDistance` the previous joystick is destroyed and a new one is created.\r\n- **cannot** be multitouch.\r\n\r\n#### `'static'`\r\n- a joystick is positionned immediately at `options.position`.\r\n- one joystick per zone.\r\n- each new touch triggers a new direction.\r\n- **cannot** be multitouch.\r\n\r\n### `options.restOpacity` defaults to 0.5\r\nThe opacity to apply when the joystick is in a rest position.\r\n\r\n### `options.catchDistance` defaults to 200\r\nThis is only useful in the `semi` mode, and determine at which distance we recycle the previous joystick.\r\n\r\nAt 200 (px), if you press the zone into a rayon of 200px around the previously displayed joystick,\r\nit will act as a `static` one.\r\n\r\n----\r\n\r\n## API\r\n\r\n### NippleJS instance (manager)\r\n\r\nYour manager has the following signature :\r\n\r\n```javascript\r\n{\r\n    on: Function,                       // handle internal event\r\n    off: Function,                      // un-handle internal event\r\n    get: Function,                      // get a specific joystick\r\n    destroy: Function,                  // destroy everything\r\n    ids: Array                          // array of assigned ids\r\n    id: Number                          // id of the manager\r\n    options: {\r\n        zone: Element,                  // reactive zone\r\n        multitouch: Boolean,\r\n        maxNumberOfNipples: Number,\r\n        mode: String,\r\n        position: Object,\r\n        catchDistance: Number,\r\n        size: Number,\r\n        threshold: Number,\r\n        color: String,\r\n        fadeTime: Number,\r\n        dataOnly: Boolean,\r\n        restOpacity: Number\r\n    }\r\n}\r\n```\r\n\r\n#### `manager.on(type, handler)`\r\n\r\nIf you whish to listen to internal events like :\r\n\r\n```javascript\r\nmanager.on('event#1 event#2', function (evt, data) {\r\n    // Do something.\r\n});\r\n```\r\n\r\nNote that you can listen to multiple events at once by separating\r\nthem either with a space or a comma (or both, I don't care).\r\n\r\n#### `manager.off([type, handler])`\r\n\r\nTo remove an event handler :\r\n\r\n```javascript\r\nmanager.off('event', handler);\r\n```\r\n\r\nIf you call off without arguments, all handlers will be removed.\r\n\r\nIf you don't specify the handler but just a type, all handlers for that type will be removed.\r\n\r\n#### `manager.get(identifier)`\r\n\r\nAn helper to get an instance via its identifier.\r\n\r\n```javascript\r\n// Will return the nipple instanciated by the touch identified by 0\r\nmanager.get(0);\r\n```\r\n\r\n#### `manager.destroy()`\r\n\r\nGently remove all nipples from the DOM and unbind all events.\r\n\r\n```javascript\r\nmanager.destroy();\r\n```\r\n\r\n#### `manager.ids`\r\n\r\nThe array of nipples' ids under this manager.\r\n\r\n#### `manager.id`\r\n\r\nThe incremented id of this manager.\r\n\r\n### nipple instance (joystick)\r\n\r\nEach joystick has the following signature :\r\n\r\n```javascript\r\n{\r\n    on: Function,\r\n    off: Function,\r\n    el: Element,\r\n    show: Function,         // fade-in\r\n    hide: Function,         // fade-out\r\n    add: Function,          // inject into dom\r\n    remove: Function,       // remove from dom\r\n    destroy: Function,\r\n    identifier: Number,\r\n    trigger: Function,\r\n    position: {             // position of the center\r\n        x: Number,\r\n        y: Number\r\n    },\r\n    frontPosition: {        // position of the front part\r\n        x: Number,\r\n        y: Number\r\n    },\r\n    ui: {\r\n        el: Element,\r\n        front: Element,\r\n        back: Element\r\n    },\r\n    options: {\r\n        color: String,\r\n        size: Number,\r\n        threshold: Number,\r\n        fadeTime: Number\r\n    }\r\n}\r\n```\r\n\r\n### `joystick.on`, `joystick.off`\r\n\r\nThe same as the manager.\r\n\r\n### `joystick.el`\r\n\r\nDom element in which the joystick gets created.\r\n\r\n```html\r\n<div class=\"nipple\">\r\n    <div class=\"front\"></div>\r\n    <div class=\"back\"></div>\r\n</div>\r\n```\r\n\r\n### `joystick.show([cb])`\r\n\r\nWill show the joystick at the last known place.\r\n\r\nYou can pass a callback that will be executed at the end of the fade-in animation.\r\n\r\n### `joystick.hide([cb])`\r\n\r\nWill fade-out the joystick.\r\n\r\nYou can pass a callback that will be executed at the end of the fade-out animation.\r\n\r\n### `joystick.add()`\r\n\r\nAdd the joystick's element to the dom.\r\n\r\n### `joystick.remove()`\r\n\r\nRemove the joystick's element from the dom.\r\n\r\n### `joystick.destroy()`\r\n\r\nGently remove this nipple from the DOM and unbind all related events.\r\n\r\n### `joystick.identifier`\r\n\r\nReturns the unique identifier of the joystick.\r\n\r\nTied to its touch's identifier.\r\n\r\n### `joystick.trigger(type [, data])`\r\n\r\nTrigger an internal event from the joystick.\r\n\r\nThe same as `on` you can trigger multiple events at the same time.\r\n\r\n### `joystick.position`\r\n\r\nThe absolute position of the center of the joystick.\r\n\r\n### `joystick.frontPosition`\r\n\r\nThe absolute position of the back part of the joystick's ui.\r\n\r\n### `joystick.ui`\r\n\r\nThe object that store its ui elements\r\n\r\n```html\r\n{\r\n    el: <div class=\"nipple\"></div>\r\n    back: <div class=\"back\"></div>\r\n    front: <div class=\"front\"></div>\r\n}\r\n```\r\n\r\n----\r\n\r\n## Events\r\n\r\nYou can listen events both on the manager and all the joysticks.\r\n\r\nBut some of them are specific to its instance.\r\n\r\nIf you need to listen to each joystick, for example, you can :\r\n\r\n```javascript\r\nmanager.on('added', function (evt, nipple) {\r\n    nipple.on('start move end dir plain', function (evt) {\r\n        // DO EVERYTHING\r\n    });\r\n}).on('removed', function (evt, nipple) {\r\n    nipple.off('start move end dir plain');\r\n});\r\n```\r\n\r\n### manager only\r\n\r\n#### `added`\r\n\r\nA joystick just got added.\r\n\r\nWill pass the instance alongside the event.\r\n\r\n#### `removed`\r\n\r\nA joystick just got removed.\r\n\r\nFired at the end of the fade-out animation.\r\n\r\nWill pass the instance alongside the event.\r\n\r\nWon't be trigger in a `dataOnly` configuration.\r\n\r\n### manager and joysticks\r\n\r\nOther events are available on both the manager and joysticks.\r\n\r\nWhen listening on the manager,\r\nyou can also target **a joystick in particular** by prefixing\r\nthe event with its identifier, **`0:start`** for example.\r\n\r\nElse you'll get all events from all the joysticks.\r\n\r\n#### `start`\r\n\r\nA joystick is activated. (the user pressed on the active zone)\r\n\r\nWill pass the instance alongside the event.\r\n\r\n#### `end`\r\n\r\nA joystick is de-activated. (the user released the active zone)\r\n\r\nWill pass the instance alongside the event.\r\n\r\n#### `move`\r\n\r\nA joystick is moved.\r\n\r\nComes with data :\r\n\r\n```javascript\r\n{\r\n    identifier: 0,              // the identifier of the touch/mouse that triggered it\r\n    position: {                 // absolute position of the center in pixels\r\n        x: 125,\r\n        y: 95\r\n    },\r\n    force: 0.2,                 // strength in %\r\n    distance: 25.4,             // distance from center in pixels\r\n    pressure: 0.1,              // the pressure applied by the touch\r\n    angle: {\r\n        radian: 1.5707963268,   // angle in radian\r\n        degree: 90\r\n    },\r\n    instance: Nipple            // the nipple instance that triggered the event\r\n}\r\n```\r\n\r\n#### `dir`\r\n\r\nWhen a direction is reached after the threshold.\r\n\r\nDirection are split with a 45° angle.\r\n\r\n```javascript\r\n//     \\  UP /\r\n//      \\   /\r\n// LEFT       RIGHT\r\n//      /   \\\r\n//     /DOWN \\\r\n```\r\n\r\nYou can also listen to specific direction like :\r\n\r\n- `dir:up`\r\n- `dir:down`\r\n- `dir:right`\r\n- `dir:left`\r\n\r\nIn this configuration only one direction is triggered at a time.\r\n\r\n#### `plain`\r\n\r\nWhen a plain direction is reached after the threshold.\r\n\r\nPlain directions are split with a 90° angle.\r\n\r\n```javascript\r\n//       UP               |\r\n//     ------        LEFT | RIGHT\r\n//      DOWN              |\r\n```\r\n\r\nYou can also listen to specific plain direction like :\r\n\r\n- `plain:up`\r\n- `plain:down`\r\n- `plain:right`\r\n- `plain:left`\r\n\r\nIn this configuration two directions can be triggered at a time,\r\nbecause the user could be both `up` and `left` for example.\r\n\r\n#### `shown`\r\n\r\nIs triggered at the end of the fade-in animation.\r\n\r\nWill pass the instance alongside the event.\r\n\r\nWon't be trigger in a `dataOnly` configuration.\r\n\r\n#### `hidden`\r\n\r\nIs triggered at the end of the fade-out animation.\r\n\r\nWill pass the instance alongside the event.\r\n\r\nWon't be trigger in a `dataOnly` configuration.\r\n\r\n#### `destroyed`\r\n\r\nIs triggered at the end of destroy.\r\n\r\nWill pass the instance alongside the event.\r\n\r\n#### `pressure`\r\n\r\n> MBP's [**Force Touch**](http://www.apple.com/macbook-pro/features-retina/#interact), iOS's [**3D Touch**](http://www.apple.com/iphone-6s/3d-touch/), Microsoft's [**pressure**](https://msdn.microsoft.com/en-us/library/hh772360%28v=vs.85%29.aspx) or MDN's [**force**](https://developer.mozilla.org/en-US/docs/Web/API/Touch/force)\r\n\r\nIs triggered when the pressure on the joystick is changed.\r\n\r\nThe value, between 0 and 1, is sent back alongside the event.\r\n\r\n----\r\n\r\n## Contributing\r\nYour help is more than welcome, I would be very honored to have you on my side.\r\n\r\nHere are some very basic guidelines.\r\n\r\n#### Commits\r\nPlease follow these [guidelines](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit) so your commits will be taken by the self-generated changelog.\r\n\r\n#### Style\r\nThere are both [JSCS](http://jscs.info/) and [ESLint](http://eslint.org/) in the project.\r\n\r\nTo test your code against them simply run `npm run prebuild`.\r\n\r\nWe follow a **4 spaces** rule around here.\r\n\r\n#### Workflow\r\nYou can use the available scripts if needed.\r\n\r\n- `npm run watch` will run the build each time a change is detected.\r\n- `npm run formatAndLint` will test the formatting and the linting of your code.\r\n- `npm start` will run a static server that will serve the [`test/`](./test) folder on [`localhost:8080`](http://localhost:8080).\r\n- `npm test` will test using CasperJS, you have to run `npm start` in another window to have a local server available to CasperJS.\r\n\r\n#### Build\r\nOnce you're satisfied with your changes, you can also include a build.\r\n\r\n1. `npm run build` to generate built files.\r\n2. commit your build with the message `chore: new build`.\r\n3. `npm version patch|minor|major` depending on your change. Changelog will be generated and bower's version synced and everything is automatically committed (not pushed though).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yoannmoinet/nipplejs.git"
  },
  "scripts": {
    "bowerSync": "node ./bin/bowerSync.js",
    "build": "npm run buildWatch && npm run uglify",
    "buildWatch": "npm run concat && npm run umd",
    "changelog": "node ./bin/changelog.js",
    "clean": "node ./bin/clean.js",
    "concat": "concat-cli -f ./src/start.js ./src/utils.js ./src/super.js ./src/nipple.js ./src/collection.js ./src/manager.js ./src/end.js -o ./nipplejs.temp.js",
    "copyGh": "node ./bin/copyToGhPages.js",
    "copyToTest": "node ./bin/copyToTest.js",
    "format": "jscs ./src/start.js ./src/utils.js ./src/super.js ./src/manager.js ./src/nipple.js ./test/nipplejs.casper.js",
    "formatAndLint": "npm run format && npm run lint",
    "lint": "eslint ./src/start.js ./src/utils.js ./src/super.js ./src/manager.js ./src/nipple.js ./src/end.js ./test/nipplejs.casper.js",
    "postbuildWatch": "npm run clean && npm run copyToTest",
    "postversion": "npm run bowerSync && npm run changelog",
    "prebuild": "npm run formatAndLint",
    "pretest": "npm run build",
    "start": "static test",
    "test": "casperjs test ./test/nipplejs.casper.js",
    "toc": "markdown-toc -i README.md",
    "uglify": "uglifyjs ./dist/nipplejs.js -o ./dist/nipplejs.min.js -c -m",
    "umd": "umd nipplejs ./nipplejs.temp.js ./dist/nipplejs.js",
    "watch": "watch \"npm run buildWatch\" src"
  },
  "version": "0.6.7"
}
